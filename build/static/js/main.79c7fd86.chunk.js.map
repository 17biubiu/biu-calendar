{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["WeekContainer","weekList","text","value","map","week","className","key","formateWithZero","num","formateDate","year","month","day","getCurrentDate","date","Date","getFullYear","getMonth","getDate","DayContainer","dayList","dayDate","currentDate","lastDay","setDate","allDayNums","firstDate","i","dateString","dayObject","getDay","other","isToday","push","length","previousMonthDate","previousMonthLastDay","getTime","previousYear","previousMonth","previousDayObject","concat","nextMonthDate","nextYear","nextMonth","nextMonthDateLength","nextDayObject","getCurrentCalendar","index","CalendarHeader","App","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79c7fd86.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { IWeek } from './Calendar.type';\n\nfunction WeekContainer() {\n  const weekDatas: IWeek[] = [\n    { text: 'SUN', value: 0 },\n    { text: 'MON', value: 1 },\n    { text: 'TUE', value: 2 },\n    { text: 'WED', value: 3 },\n    { text: 'THU', value: 4 },\n    { text: 'FRI', value: 5 },\n    { text: 'SAT', value: 6 }\n  ];\n\n  const weekList = weekDatas.map((week: IWeek) => <li className=\"biu-calendar__week_item\" key={week.value}>{week.text}</li>);\n\n  return (\n    <ul className=\"biu-calendar__week\">\n      {weekList}\n    </ul>\n  )\n}\n\nfunction formateWithZero (num: number) {\n  return num < 10 ? `0${num}` : num;\n}\n\nfunction formateDate (year: number, month: number, day: number) {\n  return `${year}-${formateWithZero(month)}-${formateWithZero(day)}`;\n}\n\nfunction getCurrentCalendar(year: number, month: number, day: number) {\n  let dayDate = [];\n  const totalDays = 42;\n  const currentDate = new Date(formateDate(year, month, day));\n  // setDate(0):设置为上个月最后一天\n  // const lastMonth = new Date(currentDate.setMonth(currentDate.getMonth() + 1));\n  const lastDay = new Date(currentDate.setDate(0));\n  // 获取当前月份的总天数\n  const allDayNums = lastDay.getDate();\n  // 获取当前月份第一天的日期\n  const firstDate = new Date(lastDay.getFullYear(), lastDay.getMonth(), 1);\n  // const firstDay = firstDate.getDay();\n  for (let i = 1; i <= allDayNums; i++) {\n    const dateString = formateDate(year, month, i);\n    const dayObject = {\n      value: dateString,\n      week: new Date(dateString).getDay(),\n      other: false,\n      day: i,\n      isToday: dateString === formateDate(year, month, day) ? true : false\n    }\n    dayDate.push(dayObject);\n  }\n  // 判断是否需要上个月数据\n  if (dayDate[0].week && dayDate.length < totalDays) {\n    const previousMonthDate = [];\n    const previousMonthLastDay = new Date(firstDate.getTime() - 1000 * 60 * 60 * 24).getDate();\n    const previousYear = month === 1 ? year - 1 : year;\n    const previousMonth = month === 1 ? 12 : month - 1;\n    for (let i = dayDate[0].week - 1; i >= 0; i--) {\n      const dateString = formateDate(previousYear, previousMonth, previousMonthLastDay - i);\n      const previousDayObject = {\n        value: dateString,\n        week: new Date(dateString).getDay(),\n        other: true,\n        day: previousMonthLastDay - i,\n        isToday: false\n      }\n      previousMonthDate.push(previousDayObject);\n    }\n    dayDate = previousMonthDate.concat(dayDate);\n  }\n  // 判断是否需要下个月数据\n  if (dayDate.length < totalDays) {\n    const nextMonthDate = [];\n    const nextYear = month === 12 ? year + 1 : year;\n    const nextMonth = month === 12 ? 1 : month + 1;\n    const nextMonthDateLength = totalDays - dayDate.length;\n\n    for (let i = 1; i <= nextMonthDateLength; i++) {\n      const dateString = formateDate(nextYear, nextMonth, i);\n      const nextDayObject = {\n        value: dateString,\n        week: new Date(dateString).getDay(),\n        other: true,\n        day: i,\n        isToday: false\n      };\n      nextMonthDate.push(nextDayObject);\n    }\n    dayDate = dayDate.concat(nextMonthDate);\n  }\n\n  return dayDate;\n}\n\nfunction getCurrentDate () {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n\n  return {year, month, day};\n}\n\nfunction DayContainer() {\n  const {year, month, day} = getCurrentDate();\n  const days = getCurrentCalendar(year, month, day);\n  // const days = [30, 31, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 1, 2];\n  const dayList = days.map((day, index) => {\n    if (day.other) {\n      return (<div className=\"biu-calendar__day is-disabled\" key={index}>{day.day}</div>);\n    } else {\n      return (day.isToday ? <div className=\"biu-calendar__day active\" key={index}>{day.day}</div> : <div className=\"biu-calendar__day\" key={index}>{day.day}</div>);\n    }\n  });\n\n  return (\n    <div className=\"biu-calendar__day_container\">{dayList}</div>\n  )\n}\n\nfunction CalendarHeader () {\n  const {year, month} = getCurrentDate();\n  return (\n    <div className=\"biu-calendar__header\">\n      {`${year}年${month}月`}\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div id=\"biu-calendar\">\n        <CalendarHeader />\n        <WeekContainer />\n        <DayContainer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}